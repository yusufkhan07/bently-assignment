{"version":3,"sources":["components/task3/index.js","components/task2/index.js","components/color-picker/index.js","components/box/index.js","components/task1/index.js","App.js","reportWebVitals.js","index.js"],"names":["Task3","props","className","href","target","Task2","isMounted","useRef","useState","apiIsLoading","setApiIsLoading","text","setText","max","setMax","secondmax","setSecondMax","handleErrorMessage","msg","alert","validateInputText","str","JSON","parse","e","IsJsonString","getMaxAndSecondMax","a","valid","fetch","method","headers","body","result","json","status","message","secondMax","current","type","placeholder","onChange","value","onClick","ColorPicker","name","id","colorChanged","defaultColor","Box","style","backgroundColor","color","margin","Task1","setColor","bgColor","onChangeComplete","bgColorChanged","App","setBgColor","role","aria-label","to","path","hex","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7867eea8.chunk.js","sourcesContent":["export const Task3 = props => {\n\treturn (\n\t\t<div className='is-size-5'>\n\t\t\t<p>We're logging every request to our Express API server.</p>\n\t\t\t<p>\n\t\t\t\tWe're storing the logs as a JSON because JSON gives us the\n\t\t\t\tflexibility to diplay the logs the way we want on UI. Due to\n\t\t\t\ttime constraints, I am simply going to diplay the JSON logs over\n\t\t\t\there.\n\t\t\t</p>\n\t\t\t<a href='http://localhost:3007/logs.json' target='_blank'>\n\t\t\t\tView logs\n\t\t\t</a>\n\t\t</div>\n\t)\n}\n","import React, { useState, useRef, useCallback } from 'react'\n\nfunction IsJsonString(str) {\n\ttry {\n\t\tJSON.parse(str)\n\t} catch (e) {\n\t\treturn false\n\t}\n\treturn true\n}\n\nexport const Task2 = props => {\n\tconst isMounted = useRef(true)\n\tconst [apiIsLoading, setApiIsLoading] = useState()\n\tconst [text, setText] = useState('')\n\tconst [max, setMax] = useState(null)\n\tconst [secondmax, setSecondMax] = useState(null)\n\n\tconst handleErrorMessage = msg => {\n\t\t// we can display a popup or toast here\n\t\talert(msg)\n\t}\n\n\t// returns true if valid, error-msg string if invalid\n\tconst validateInputText = text => {\n\t\tif (!IsJsonString(text)) {\n\t\t\treturn 'Pass comma seperated numbers'\n\t\t}\n\n\t\treturn true\n\t}\n\n\tconst getMaxAndSecondMax = async () => {\n\t\t// don't send again while we are sending\n\t\tif (apiIsLoading) {\n\t\t\treturn\n\t\t}\n\n\t\t// check if text is valid.\n\t\tconst valid = validateInputText(text)\n\n\t\tif (valid !== true) {\n\t\t\treturn handleErrorMessage(valid)\n\t\t}\n\n\t\t// update state\n\t\tsetApiIsLoading(true)\n\n\t\ttry {\n\t\t\tconst url = 'http://localhost:3007'\n\t\t\tconst result = await fetch(url, {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: { 'Content-Type': 'application/json' },\n\t\t\t\tbody: text,\n\t\t\t})\n\n\t\t\tconst body = await result.json()\n\n\t\t\tif (result.status >= 200 && result.status < 300) {\n\t\t\t\tsetMax(body.message.max)\n\t\t\t\tsetSecondMax(body.message.secondMax)\n\t\t\t} else {\n\t\t\t\thandleErrorMessage(body.message)\n\t\t\t}\n\t\t} catch (err) {\n\t\t\thandleErrorMessage(err.body)\n\t\t} finally {\n\t\t\t// once the request is sent, update state again\n\t\t\tif (isMounted.current) setApiIsLoading(false)\n\t\t}\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<div className='field'>\n\t\t\t\t<label className='label'>Enter comma seperated numbers</label>\n\t\t\t\t<div className='control'>\n\t\t\t\t\t<input\n\t\t\t\t\t\tclassName='input'\n\t\t\t\t\t\ttype='text'\n\t\t\t\t\t\tplaceholder='11, 53, 613, 90, 25'\n\t\t\t\t\t\tonChange={e => {\n\t\t\t\t\t\t\tsetText('[' + e.target.value + ']')\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div className='field'>\n\t\t\t\t<button\n\t\t\t\t\tonClick={getMaxAndSecondMax}\n\t\t\t\t\tclassName={\n\t\t\t\t\t\t'button is-primary ' +\n\t\t\t\t\t\t(apiIsLoading ? 'is-loading' : '')\n\t\t\t\t\t}\n\t\t\t\t>\n\t\t\t\t\tSubmit\n\t\t\t\t</button>\n\t\t\t</div>\n\n\t\t\t<div className='field'>\n\t\t\t\t{max && <p className='title'>Max: {max}</p>}\n\t\t\t</div>\n\t\t\t<div className='field'>\n\t\t\t\t{secondmax && <p className='title'>SecondMax: {secondmax}</p>}\n\t\t\t</div>\n\t\t</>\n\t)\n}\n","export const ColorPicker = props => {\n\treturn (\n\t\t<div className='select is-large'>\n\t\t\t<select\n\t\t\t\tname='colors'\n\t\t\t\tid='color-picker'\n\t\t\t\tonChange={props.colorChanged}\n\t\t\t\tvalue={props.defaultColor}\n\t\t\t>\n\t\t\t\t<option value='red'>Red</option>\n\t\t\t\t<option value='blue'>Blue</option>\n\t\t\t\t<option value='green'>Green</option>\n\t\t\t\t<option value='black'>Black</option>\n\t\t\t</select>\n\t\t</div>\n\t)\n}\n","export const Box = props => {\n\treturn (\n\t\t<div\n\t\t\tclassName='card'\n\t\t\tstyle={{\n\t\t\t\tbackgroundColor: props.color,\n\t\t\t\tmargin: '20px 0',\n\t\t\t}}\n\t\t>\n\t\t\t<div className='card-content'>\n\t\t\t\t<p className='title'>...just a random card</p>\n\t\t\t\t<p className='subtitle'>\n\t\t\t\t\twith a color of <b>{props.color} </b>\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n","import { useState } from 'react'\nimport { SliderPicker } from 'react-color'\n\nimport { ColorPicker } from '../color-picker'\nimport { Box } from '../box'\n\nexport const Task1 = props => {\n\tconst [color, setColor] = useState('red')\n\n\tconst colorChanged = color => {\n\t\tsetColor(color)\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<div className='container'>\n\t\t\t\t<h1 className='title'>Select a color from the drop-down</h1>\n\t\t\t\t<div>\n\t\t\t\t\t<ColorPicker\n\t\t\t\t\t\tdefaultColor={color}\n\t\t\t\t\t\tcolorChanged={e => colorChanged(e.target.value)}\n\t\t\t\t\t></ColorPicker>\n\t\t\t\t</div>\n\n\t\t\t\t<div>\n\t\t\t\t\t<Box color={color}></Box>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div className='container'>\n\t\t\t\t<h1 className='title'>Try a new Background Color</h1>\n\n\t\t\t\t<SliderPicker\n\t\t\t\t\tcolor={props.bgColor}\n\t\t\t\t\tonChangeComplete={props.bgColorChanged}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</>\n\t)\n}\n","import './App.css'\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom'\nimport { useState } from 'react'\n\nimport { Task3 } from './components/task3'\nimport { Task2 } from './components/task2'\nimport { Task1 } from './components/task1'\n\nfunction App() {\n\tconst [bgColor, setBgColor] = useState('#7ECBA2')\n\n\tconst bgColorChanged = color => {\n\t\tsetBgColor(color.hex)\n\t}\n\n\treturn (\n\t\t<Router>\n\t\t\t<nav\n\t\t\t\tclassName='navbar is-dark'\n\t\t\t\trole='navigation'\n\t\t\t\taria-label='main navigation'\n\t\t\t>\n\t\t\t\t<div className='navbar-menu is-active'>\n\t\t\t\t\t<div className='navbar-start'>\n\t\t\t\t\t\t<Link to='/' className='navbar-item'>\n\t\t\t\t\t\t\tTask 1\n\t\t\t\t\t\t</Link>\n\n\t\t\t\t\t\t<Link to='/task2' className='navbar-item'>\n\t\t\t\t\t\t\tTask 2\n\t\t\t\t\t\t</Link>\n\n\t\t\t\t\t\t<Link to='/task3' className='navbar-item'>\n\t\t\t\t\t\t\tTask 3\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</nav>\n\n\t\t\t<div className='App'>\n\t\t\t\t<section\n\t\t\t\t\tclassName='hero'\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tbackgroundColor: bgColor,\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<div className='hero-body'>\n\t\t\t\t\t\t<Switch>\n\t\t\t\t\t\t\t<Route path='/task3'>\n\t\t\t\t\t\t\t\t<Task3 />\n\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t\t<Route path='/task2'>\n\t\t\t\t\t\t\t\t<Task2 />\n\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t\t<Route path='/'>\n\t\t\t\t\t\t\t\t<Task1\n\t\t\t\t\t\t\t\t\tbgColor={bgColor}\n\t\t\t\t\t\t\t\t\tbgColorChanged={bgColorChanged}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t</Switch>\n\t\t\t\t\t</div>\n\t\t\t\t</section>\n\t\t\t</div>\n\t\t</Router>\n\t)\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}